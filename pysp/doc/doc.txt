Generating SMPS Input Files From PySP Models
==========================================
:Author:    Gabriel Hackebeil <gabe.hackebeil@gmail.com>
:numbered:

This document explains how to annotate PySP models to enable
conversion to the SMPS input file format and additionally how run the
necessary scripts to perform this conversion. Annotations are
necessary so that conversion routines know the locations of stochastic
elements in a Pyomo model and thus can output these locations in a
sparse manner over the entire scenario tree.

Annotating Models for SMPS File Generation
------------------------------------------
Model annotations are declared on the reference model using the Suffix
component. The complete list of annotation types are shown in the
example below. These will be discussed in further detail in the
remainder of this section.
[source,python]
----
from pyomo.core import *

model = ConcreteModel()

model.PySP_StochasticRHS = Suffix()
model.PySP_StochasticMatrix = Suffix()
model.PySP_StochasticObjective = Suffix()
model.PySP_StochasticVariableBounds = Suffix()
model.PySP_StochasticData = Suffix()
----

Stochastic Constraint Bounds (RHS)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
If stochastic elements appear on the right-hand-side of constraints,
these locations should be declared on the PySP_StochasticRHS
suffix. This suffix maps constraint objects to a trivial boolean True
value.  In the case of range constraints, the constraint object should
be mapped to a 2-tuple of boolean values.  In this situation, the
first and second tuple elements should be boolean flags indicating
stochasticity of the constraint lower bound and upper bound,
respectively.  This is highlighted in the example below.
[source,python]
----
model.c = Constraint(expr= model.x >= 1)
model.PySP_StochasticRHS[model.c] = True

model.r = Constraint(expr= 0 <= model.x <= 10)
model.PySP_StochasticRHS[model.r] = (False, True)
----

Stochastic Constraint Matrix
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
If stochastic elements appear as coefficients of variables in the
constraint matrix, these locations should be declared on
the PySP_StochasticMatrix suffix. The entries of this suffix
map constraint objects to a list of variable objects for
which stochastic elements appear next to. This is highlighted
in the example below.
[source,python]
----
model.c = Constraint(expr= 2 * model.x >= 1)
model.PySP_StochasticRHS[model.c] = [model.x]

model.r = Constraint(expr= 0 <= 1 * model.x + model.y * 5 <= 10)
model.PySP_StochasticRHS[model.r] = [model.x, model.y]
----

Stochastic Objective Elements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
If stochastic elements appear as coefficients of variables in the
objective expression, these locations should be declared on
the PySP_StochasticObjective suffix. The entries of this suffix map
variable objects to a simple boolean True value. This is highlighted
in the example below.
[source,python]
----
model.s = Set(initialize=[1,2,3])
model.y = Var(model.s)
model.x = Var()
model.PySP_StochasticObjective[model.y[1]] = True
model.PySP_StochasticObjective[model.x] = True
----

Stochastic Variable Bounds
~~~~~~~~~~~~~~~~~~~~~~~~~~
TODO

Corner Cases
------------
TODO

Stochastic Objective Constant
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TODO

Failing Cross-Scenario Nonzero Check
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TODO

Generating SMPS Input Files
---------------------------

Explicit Scenario Output
~~~~~~~~~~~~~~~~~~~~~~~~
TODO

Implicit Scenario Output
~~~~~~~~~~~~~~~~~~~~~~~~
TODO

